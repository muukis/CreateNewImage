// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Image.ShoppingList
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ShoppingListAPI.
    /// </summary>
    public static partial class ShoppingListAPIExtensions
    {
            /// <summary>
            /// Get all shopping list items
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shopperName'>
            /// Shopper name
            /// </param>
            public static object GetAllShoppingListItems(this IShoppingListAPI operations, string shopperName)
            {
                return operations.GetAllShoppingListItemsAsync(shopperName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all shopping list items
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shopperName'>
            /// Shopper name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllShoppingListItemsAsync(this IShoppingListAPI operations, string shopperName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllShoppingListItemsWithHttpMessagesAsync(shopperName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new shopping list item with request type POST
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shopperName'>
            /// Shopper name
            /// </param>
            /// <param name='title'>
            /// Shopping list item title
            /// </param>
            public static object PostShoppingListItem(this IShoppingListAPI operations, string shopperName, ShoppingListTitleDto title = default(ShoppingListTitleDto))
            {
                return operations.PostShoppingListItemAsync(shopperName, title).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new shopping list item with request type POST
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shopperName'>
            /// Shopper name
            /// </param>
            /// <param name='title'>
            /// Shopping list item title
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostShoppingListItemAsync(this IShoppingListAPI operations, string shopperName, ShoppingListTitleDto title = default(ShoppingListTitleDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostShoppingListItemWithHttpMessagesAsync(shopperName, title, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all pending shopping list items
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shopperName'>
            /// Shopper name
            /// </param>
            public static object GetPendingShoppingListItems(this IShoppingListAPI operations, string shopperName)
            {
                return operations.GetPendingShoppingListItemsAsync(shopperName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all pending shopping list items
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shopperName'>
            /// Shopper name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPendingShoppingListItemsAsync(this IShoppingListAPI operations, string shopperName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPendingShoppingListItemsWithHttpMessagesAsync(shopperName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get shopping list item
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shoppingListItemId'>
            /// Shopping list item identifier
            /// </param>
            public static object GetShoppingListItem(this IShoppingListAPI operations, System.Guid shoppingListItemId)
            {
                return operations.GetShoppingListItemAsync(shoppingListItemId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get shopping list item
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shoppingListItemId'>
            /// Shopping list item identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetShoppingListItemAsync(this IShoppingListAPI operations, System.Guid shoppingListItemId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetShoppingListItemWithHttpMessagesAsync(shoppingListItemId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete shopping list item
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shoppingListItemId'>
            /// Shopping list item identifier
            /// </param>
            public static object DeleteShoppingListItem(this IShoppingListAPI operations, System.Guid shoppingListItemId)
            {
                return operations.DeleteShoppingListItemAsync(shoppingListItemId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete shopping list item
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shoppingListItemId'>
            /// Shopping list item identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteShoppingListItemAsync(this IShoppingListAPI operations, System.Guid shoppingListItemId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteShoppingListItemWithHttpMessagesAsync(shoppingListItemId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new shopping list item with request type PUT
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shopperName'>
            /// Shopper name
            /// </param>
            /// <param name='title'>
            /// Shopping list item title
            /// </param>
            public static object SetShoppingListItem(this IShoppingListAPI operations, string shopperName, string title)
            {
                return operations.SetShoppingListItemAsync(shopperName, title).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new shopping list item with request type PUT
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shopperName'>
            /// Shopper name
            /// </param>
            /// <param name='title'>
            /// Shopping list item title
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetShoppingListItemAsync(this IShoppingListAPI operations, string shopperName, string title, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetShoppingListItemWithHttpMessagesAsync(shopperName, title, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update shopping list item in-cart value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shoppingListItemId'>
            /// Shopping list item identifier
            /// </param>
            /// <param name='pending'>
            /// New shopping list item pending value
            /// </param>
            public static object UpdateShoppingListItemPendingValue(this IShoppingListAPI operations, System.Guid shoppingListItemId, bool pending)
            {
                return operations.UpdateShoppingListItemPendingValueAsync(shoppingListItemId, pending).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update shopping list item in-cart value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shoppingListItemId'>
            /// Shopping list item identifier
            /// </param>
            /// <param name='pending'>
            /// New shopping list item pending value
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateShoppingListItemPendingValueAsync(this IShoppingListAPI operations, System.Guid shoppingListItemId, bool pending, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateShoppingListItemPendingValueWithHttpMessagesAsync(shoppingListItemId, pending, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete all unpending shopping list items
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shopperName'>
            /// Shopper name
            /// </param>
            public static object DeleteAllUnpendingShoppingListItems(this IShoppingListAPI operations, string shopperName)
            {
                return operations.DeleteAllUnpendingShoppingListItemsAsync(shopperName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete all unpending shopping list items
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shopperName'>
            /// Shopper name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAllUnpendingShoppingListItemsAsync(this IShoppingListAPI operations, string shopperName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAllUnpendingShoppingListItemsWithHttpMessagesAsync(shopperName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new shopper
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shopperName'>
            /// Shopper name
            /// </param>
            public static object CreateNewShopper(this IShoppingListAPI operations, ShopperNameDto shopperName = default(ShopperNameDto))
            {
                return operations.CreateNewShopperAsync(shopperName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new shopper
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shopperName'>
            /// Shopper name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateNewShopperAsync(this IShoppingListAPI operations, ShopperNameDto shopperName = default(ShopperNameDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNewShopperWithHttpMessagesAsync(shopperName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
